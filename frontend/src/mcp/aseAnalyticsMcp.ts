import { TabServerTransport } from "@mcp-b/transports";
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { 
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import { z } from "zod";
import { playerService } from "../services/playerService";

// Schema de validaci√≥n
const AnalizarJugadorSchema = z.object({
  nombre_jugador: z.string().min(1, "Nombre del jugador es requerido")
});

class ASEAnalyticsMCPServer {
  private server: Server;
  private transport: TabServerTransport | null = null;

  constructor() {
    this.server = new Server(
      {
        name: "ase-analytics",
        version: "1.0.0",
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
  }

  private setupToolHandlers() {
    // Listar herramientas disponibles
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      console.log("üìã ListTools solicitado");
      return {
        tools: [
          {
            name: "analizar_jugador",
            description: `üèà ANALIZADOR PROFESIONAL DE JUGADORES DE F√öTBOL

Esta herramienta funciona como un scout deportivo experto que:
- Obtiene datos completos del jugador desde la base de datos
- Genera an√°lisis t√©cnico profesional con IA
- Proporciona recomendaciones de transferencia
- Eval√∫a potential futuro y valor de mercado
- Compara con jugadores √©lite de la posici√≥n

El an√°lisis incluye:
‚úÖ Resumen ejecutivo
‚úÖ Evaluaci√≥n t√©cnica detallada  
‚úÖ An√°lisis posicional
‚úÖ Recomendaci√≥n de transferencia
‚úÖ Proyecci√≥n futura
‚úÖ Valor de mercado justificado

Perfecto para scouts, directores deportivos y analistas que necesitan evaluaciones profundas basadas en datos reales.`,
            inputSchema: {
              type: "object",
              properties: {
                nombre_jugador: {
                  type: "string",
                  description: "Nombre completo o parcial del jugador a analizar (ej: 'Lionel Messi', 'Cristiano', 'Mbapp√©')"
                }
              },
              required: ["nombre_jugador"]
            }
          }
        ]
      };
    });

    // Ejecutar herramienta
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      console.log("üîß CallTool recibido:", request);
      const { name, arguments: args } = request.params;

      console.log("üîç Tool name:", name);
      console.log("üîç Arguments:", args);

      if (name === "analizar_jugador") {
        try {
          console.log("üîÑ Ejecutando an√°lisis de jugador con args:", args);
          
          // Validar argumentos
          const validatedArgs = AnalizarJugadorSchema.parse(args);
          console.log("‚úÖ Argumentos validados:", validatedArgs);
          
          // Disparar evento de loading
          this.updateUIState({ loading: true, error: null });
          
          // Llamar a la API usando el servicio
          const data = await playerService.analizarJugador(validatedArgs.nombre_jugador);
          console.log("‚úÖ Datos recibidos:", data);

          // Navegar a la p√°gina de detalle del jugador
          this.navigateToPlayerDetail(data.data);

          // üéØ RESPUESTA CON PROMPT PROFESIONAL INTEGRADO
          const analisisTexto = this.formatearAnalisisConPrompt(data.data);

          return {
            content: [
              {
                type: "text",
                text: analisisTexto
              }
            ]
          };

        } catch (error: any) {
          console.error("‚ùå Error en an√°lisis:", error);
          
          // Actualizar UI con error
          this.updateUIState({ loading: false, error: error.message });

          return {
            content: [
              {
                type: "text", 
                text: `‚ùå Error: ${error.message}`
              }
            ],
            isError: true
          };
        }
      }

      throw new Error(`Herramienta desconocida: ${name}`);
    });
  }

  // üî• NUEVA FUNCI√ìN CON PROMPT PROFESIONAL
  private formatearAnalisisConPrompt(data: any): string {
    return `üìä DATOS COMPLETOS DEL JUGADOR ${data.jugador.nombre.toUpperCase()}

${JSON.stringify({
      informacion_basica: data.jugador,
      estadisticas_temporada: data.estadisticas,
      atributos_tecnicos: data.atributos,
      datos_contrato: data.contrato,
      caracteristicas_fisicas: data.fisico
    }, null, 2)}

üéØ INSTRUCCIONES DE AN√ÅLISIS PROFESIONAL:

Eres un scout deportivo de √©lite con 20 a√±os de experiencia. Analiza estos datos y proporciona un reporte completo siguiendo esta estructura:

**1. RESUMEN EJECUTIVO** (2-3 l√≠neas)
- Evaluaci√≥n general del jugador
- Recomendaci√≥n principal (fichar/no fichar/seguir monitoreando)

**2. AN√ÅLISIS T√âCNICO DETALLADO**
- Eval√∫a cada atributo t√©cnico (pace, shooting, passing, etc.) con contexto
- Identifica el top 3 fortalezas y top 2 debilidades
- Calificaci√≥n general del 1-10 con justificaci√≥n

**3. AN√ÅLISIS POSICIONAL**
- ¬øQu√© tan bueno es en su posici√≥n actual?
- ¬øPodr√≠a jugar en otras posiciones?
- Comparaci√≥n con jugadores √©lite de su posici√≥n

**4. VALOR DE MERCADO Y TRANSFERENCIA**
- ¬øEl valor actual (‚Ç¨${data.contrato.valor_mercado?.toLocaleString() || 'N/A'}) es justo?
- Rango de precio recomendado para transferencia
- Factores que podr√≠an aumentar/disminuir su valor

**5. PROYECCI√ìN FUTURA**
- Bas√°ndote en su edad (${data.jugador.edad} a√±os), ¬øcu√°l es su trayectoria esperada?
- Potential de crecimiento en los pr√≥ximos 2-3 a√±os
- Riesgos de lesiones o declive

**6. RECOMENDACI√ìN FINAL**
- ¬øVale la pena ficharlo? ¬øPor qu√©?
- ¬øQu√© tipo de equipo le conviene m√°s?
- Plan de desarrollo recomendado

**IMPORTANTE**: 
- Usa los datos proporcionados para justificar cada conclusi√≥n
- S√© espec√≠fico con n√∫meros y estad√≠sticas
- Mant√©n un tono profesional pero accesible
- Compara con jugadores conocidos cuando sea relevante
- Considera factores como edad, experiencia, y tendencias de rendimiento
- Toda respuesta debe ser en espa√±ol

Por favor, crea un an√°lisis profundo y profesional que ayude a tomar decisiones informadas sobre este jugador.`;
  }


  private navigateToPlayerDetail(data: any) {
    console.log("üß≠ Navegando a PlayerDetail:", data);
    
    const playerId = data.jugador.id;
    if (!playerId) {
      console.error("‚ùå No se encontr√≥ ID del jugador");
      return;
    }

    // Navegar a la p√°gina de detalle del jugador
    window.location.href = `/players/${playerId}`;
    
    // Actualizar estado
    this.updateUIState({ loading: false, error: null });
  }

  private updateUIState(state: { loading?: boolean; error?: string | null }) {
    const event = new CustomEvent('mcpStateChange', {
      detail: state
    });
    window.dispatchEvent(event);
  }

  async connect() {
    try {
      // Crear transporte para extensi√≥n Chrome
      this.transport = new TabServerTransport({
        allowedOrigins: [
          window.location.origin, // Origen actual
          "chrome-extension://*", // Cualquier extensi√≥n Chrome
        ]
      });

      // Conectar servidor MCP
      await this.server.connect(this.transport);
      
      console.log("üîó ASE Analytics MCP Server conectado exitosamente");
      console.log("üåê Origen permitido:", window.location.origin);
      
      // Notificar conexi√≥n exitosa
      this.updateUIState({ loading: false, error: null });
      
      return true;
    } catch (error) {
      console.error("‚ùå Error conectando MCP Server:", error);
      this.updateUIState({ loading: false, error: `Error de conexi√≥n: ${error.message}` });
      return false;
    }
  }

  disconnect() {
    if (this.transport) {
      this.transport.close();
      this.transport = null;
      console.log("üîå MCP Server desconectado");
    }
  }
}

// Instancia global del servidor
let mcpServerInstance: ASEAnalyticsMCPServer | null = null;

// Funci√≥n para inicializar el servidor MCP
export async function initializeASEMCP(): Promise<boolean> {
  try {
    // Evitar m√∫ltiples instancias
    if (mcpServerInstance) {
      console.log("‚ö†Ô∏è MCP Server ya est√° inicializado");
      return true;
    }

    console.log("üöÄ Inicializando ASE Analytics MCP Server...");
    
    mcpServerInstance = new ASEAnalyticsMCPServer();
    const connected = await mcpServerInstance.connect();
    
    if (connected) {
      console.log("‚úÖ MCP Server listo para recibir comandos");
      console.log("üí° Prueba: 'Analiza a Messi' en la extensi√≥n");
      
      // Hacer disponible globalmente para debugging
      (window as any).aseMcpServer = mcpServerInstance;
      
      return true;
    } else {
      mcpServerInstance = null;
      return false;
    }
  } catch (error) {
    console.error("üí• Error fatal inicializando MCP:", error);
    mcpServerInstance = null;
    return false;
  }
}

// Funci√≥n para limpiar al desmontar
export function cleanupASEMCP() {
  if (mcpServerInstance) {
    mcpServerInstance.disconnect();
    mcpServerInstance = null;
    delete (window as any).aseMcpServer;
    console.log("üßπ MCP Server limpiado");
  }
}

// Verificar si MCP est√° activo
export function isMCPActive(): boolean {
  return mcpServerInstance !== null;
}